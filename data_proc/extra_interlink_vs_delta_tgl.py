import matplotlib.pyplot as plt
import numpy as np


def make_scatterplot(interlinks, deltas, ppv):
    interlinks_added = {}
    for imax in range(1, 11):
        for lv in range(1, 11):
            interlinks_added[(imax, lv)] = len(interlinks[(ppv, imax, lv)])
    deltas_by_imax_lv = {}
    for lv in range(1, 11):
        values = deltas[lv]
        for imax in range(1, 11):
            deltas_by_imax_lv[(imax, lv)] = []
            for c_list in values:
                deltas_by_imax_lv[(imax, lv)].append(c_list[imax-1])
    scatter_p = False
    boxplot = True
    if scatter_p:
        x_axis = []
        y_axis = []
        for imax in range(1, 11):
            for lv in range(1, 11):
                key = (imax, lv)
                if interlinks_added[key] == 0:
                    print(key)
                    print(deltas_by_imax_lv[key])
                for delt in deltas_by_imax_lv[key]:
                    x_axis.append(interlinks_added[key])
                    y_axis.append(delt)
        fig, ax = plt.subplots()
        size = 10
        ax.scatter(x_axis, y_axis, s=[x * size for x in np.ones(len(x_axis))], alpha=1, #c=colors,
                   label="bridge nodes", edgecolor='black', linewidth=0.2)
        # ax.legend(loc='upper left')
        plt.title("")
        plt.ylabel(r'$\delta$', fontsize=18)

        plt.show()
    elif boxplot:
        boxes = {}
        for imax in range(1, 11):
            for lv in range(1, 11):
                key = (imax, lv)
                if interlinks_added[key] in boxes.keys():
                    boxes[interlinks_added[key]] += deltas_by_imax_lv[key]
                else:
                    boxes[interlinks_added[key]] = deltas_by_imax_lv[key]
        cm = 1 / 2.54
        fig, ax = plt.subplots(figsize=(20*cm, 16*cm))
        ax.plot([-2,0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14,16], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], linestyle=':')
        plt.xlim([-1, 15])
        plt.ylim([-30, 420])
        for key in boxes.keys():
            box = boxes[key]
            print(len(box))
            bp = ax.boxplot(box, positions=[key], patch_artist=True, widths=(0.8))
            for flier in bp['fliers']:
                print(len(flier.get_data()[1])/156)
                flier.set(marker='.', linewidth=0.001, markeredgecolor='gray')
        plt.show()
    else:
        boxes = {}
        for imax in range(1, 11):
            for lv in range(1, 11):
                key = (imax, lv)
                if interlinks_added[key] in boxes.keys():
                    boxes[interlinks_added[key]] += deltas_by_imax_lv[key]
                else:
                    boxes[interlinks_added[key]] = deltas_by_imax_lv[key]
        y_axis = []
        x_axis = []
        y_errors = []
        for key in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14]:
            x_axis.append(key)
            y_axis.append(np.mean(boxes[key]))
            y_errors.append(np.std(boxes[key]))
        fig, ax = plt.subplots()
        ax.errorbar(x_axis, y_axis, yerr=y_errors, marker='.', capsize=3)
        ax.set_xticks([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14], minor=False)
        plt.show()




# key = (ppv,ndep, lv)
extra_interlink_dict = {
                (3, 1, 1): [],
                (3, 2, 1): [('p353', 'l50')],
                (3, 3, 1): [('p1403', 'l50'), ('p1084', 'l50')],
                (3, 4, 1): [('p26', 'l50'), ('p154', 'l50')],
                (3, 5, 1): [('p1409', 'l50'), ('p506', 'l50')],
                (3, 6, 1): [('p202', 'l50')],
                (3, 7, 1): [('p830', 'l50'), ('p1666', 'l50'), ('p1573', 'l50'), ('p832', 'l50')],
                (3, 8, 1): [('p662', 'l50'), ('p171', 'l50'), ('p747', 'l50')],
                (3, 9, 1): [('p1752', 'l50'), ('p1041', 'l50'), ('p763', 'l50'), ('p526', 'l50'), ('p1242', 'l50'), ('p1498', 'l50'), ('p256', 'l50')],
                (3, 10, 1): [('p748', 'l50'), ('p266', 'l50'), ('p392', 'l50'), ('p1518', 'l50'), ('p1792', 'l50'), ('p322', 'l50'), ('p1566', 'l50')],

                (3, 1, 2): [],
                (3, 2, 2): [('p430', 'l52')],
                (3, 3, 2): [('p73', 'l52')],
                (3, 4, 2): [('p383', 'l52'), ('p1721', 'l52'), ('p1478', 'l52'), ('p1253', 'l294'), ('p1247', 'l294'), ('p388', 'l294')],
                (3, 5, 2): [('p1808', 'l52'), ('p209', 'l52'), ('p1071', 'l52')],
                (3, 6, 2): [('p1840', 'l52'), ('p1324', 'l52'), ('p842', 'l52')],
                (3, 7, 2): [('p1105', 'l52'), ('p1488', 'l52'), ('p1918', 'l52'), ('p1058', 'l52'), ('p915', 'l52'), ('p1277', 'l52'), ('p219', 'l294'), ('p1965', 'l294'), ('p1418', 'l294'),
                            ('p1426', 'l294'), ('p744', 'l294')],
                (3, 8, 2): [('p506', 'l294'), ('p1706', 'l294'), ('p1852', 'l294')],
                (3, 9, 2): [('p1373', 'l52'), ('p493', 'l52'), ('p592', 'l52'), ('p35', 'l52'), ('p1039', 'l52'), ('p716', 'l52'), ('p518', 'l52'), ('p1283', 'l294'), ('p1376', 'l294'),
                            ('p625', 'l294')],
                (3, 10, 2): [('p190', 'l52'), ('p791', 'l52'), ('p1696', 'l52'), ('p1482', 'l52'), ('p1855', 'l294'), ('p998', 'l294'), ('p250', 'l294'), ('p518', 'l294'), ('p1056', 'l294'),
                             ('p1590', 'l294')],

                (3, 1, 3): [],
                (3, 2, 3): [('p78', 'l192')],
                (3, 3, 3): [('p1553', 'l192'), ('p462', 'l192'), ('p387', 'l251')],
                (3, 4, 3): [('p1152', 'l192'), ('p131', 'l192'), ('p1498', 'l192'), ('p1468', 'l251'), ('p1369', 'l251')],
                (3, 5, 3): [('p1015', 'l251'), ('p885', 'l251'), ('p718', 'l251')],
                (3, 6, 3): [('p1684', 'l192'), ('p1527', 'l192')],
                (3, 7, 3): [('p679', 'l251'), ('p665', 'l251'), ('p673', 'l251'), ('p1452', 'l251')],
                (3, 8, 3): [('p789', 'l192'), ('p864', 'l192'), ('p1849', 'l192'), ('p1', 'l192'), ('p428', 'l192'), ('p841', 'l192'), ('p1377', 'l192'), ('p914', 'l251'), ('p287', 'l251'),
                            ('p139', 'l251'), ('p1225', 'l251'), ('p1058', 'l251'), ('p305', 'l251'), ('p351', 'l251')],
                (3, 9, 3): [('p1140', 'l192'), ('p508', 'l192'), ('p1679', 'l192'), ('p1381', 'l251'), ('p1077', 'l251'), ('p1576', 'l251'), ('p1774', 'l251'), ('p1091', 'l251')],
                (3, 10, 3): [('p473', 'l192'), ('p1364', 'l192'), ('p1379', 'l192'), ('p744', 'l192'), ('p1037', 'l192'), ('p1400', 'l192'), ('p598', 'l192'), ('p1569', 'l192'), ('p1486', 'l251')],

                (3, 1, 4): [],
                (3, 2, 4): [('p1957', 'l279')],
                (3, 3, 4): [],
                (3, 4, 4): [('p1814', 'l279'), ('p104', 'l279'), ('p1979', 'l279')],
                (3, 5, 4): [('p1002', 'l279'), ('p1034', 'l279')],
                (3, 6, 4): [('p124', 'l279')],
                (3, 7, 4): [('p1261', 'l279'), ('p502', 'l279'), ('p1477', 'l279'), ('p1731', 'l279'), ('p355', 'l279')],
                (3, 8, 4): [('p1206', 'l279')],
                (3, 9, 4): [('p567', 'l279'), ('p814', 'l279'), ('p112', 'l279'), ('p730', 'l279'), ('p960', 'l279'), ('p563', 'l279'), ('p746', 'l279'), ('p1888', 'l279')],
                (3, 10, 4): [('p944', 'l279'), ('p999', 'l279'), ('p393', 'l279')],

                (3, 1, 5): [],
                (3, 2, 5): [('p15', 'l138')],
                (3, 3, 5): [('p1358', 'l138'), ('p1877', 'l138')],
                (3, 4, 5): [('p1689', 'l138'), ('p293', 'l138')],
                (3, 5, 5): [('p1070', 'l138'), ('p1142', 'l138'), ('p178', 'l138')],
                (3, 6, 5): [],
                (3, 7, 5): [('p1461', 'l138'), ('p59', 'l138'), ('p1629', 'l138'), ('p257', 'l138')],
                (3, 8, 5): [('p837', 'l138'), ('p428', 'l138'), ('p1093', 'l138')],
                (3, 9, 5): [],
                (3, 10, 5): [],

                (3, 1, 6): [],
                (3, 2, 6): [('p388', 'l87')],
                (3, 3, 6): [],
                (3, 4, 6): [('p198', 'l87'), ('p1095', 'l87'), ('p650', 'l87')],
                (3, 5, 6): [('p393', 'l87'), ('p1972', 'l87')],
                (3, 6, 6): [('p1550', 'l87'), ('p1445', 'l87'), ('p688', 'l87'), ('p104', 'l87')],
                (3, 7, 6): [],
                (3, 8, 6): [('p205', 'l87'), ('p782', 'l87'), ('p1159', 'l87'), ('p570', 'l87'), ('p351', 'l87'), ('p1510', 'l87'), ('p646', 'l87')],
                (3, 9, 6): [('p571', 'l87'), ('p354', 'l87'), ('p522', 'l87')],
                (3, 10, 6): [('p1946', 'l87'), ('p1626', 'l87'), ('p774', 'l87'), ('p107', 'l87'), ('p466', 'l87')],

                (3, 1, 7): [],
                (3, 2, 7): [('p1187', 'l2')],
                (3, 3, 7): [],
                (3, 4, 7): [('p857', 'l2'), ('p1803', 'l2')],
                (3, 5, 7): [('p1335', 'l2'), ('p1742', 'l2'), ('p242', 'l2'), ('p1078', 'l2')],
                (3, 6, 7): [('p1907', 'l2'), ('p264', 'l2'), ('p964', 'l2'), ('p630', 'l2')],
                (3, 7, 7): [('p1350', 'l2')],
                (3, 8, 7): [],
                (3, 9, 7): [('p1170', 'l2'), ('p1250', 'l2'), ('p501', 'l2'), ('p214', 'l2'), ('p858', 'l2'), ('p1525', 'l2')],
                (3, 10, 7): [('p1263', 'l2'), ('p1012', 'l2')],

                (3, 1, 8): [],
                (3, 2, 8): [],
                (3, 3, 8): [('p1758', 'l88'), ('p1173', 'l88')],
                (3, 4, 8): [('p1152', 'l88'), ('p1790', 'l88'), ('p793', 'l88')],
                (3, 5, 8): [],
                (3, 6, 8): [],
                (3, 7, 8): [('p1140', 'l88'), ('p261', 'l88'), ('p347', 'l88')],
                (3, 8, 8): [('p187', 'l88'), ('p423', 'l88')],
                (3, 9, 8): [('p1235', 'l88'), ('p1662', 'l88'), ('p1402', 'l88'), ('p1646', 'l88')],
                (3, 10, 8): [('p515', 'l88'), ('p1154', 'l88')],

                (3, 1, 9): [],
                (3, 2, 9): [('p54', 'l179')],
                (3, 3, 9): [],
                (3, 4, 9): [('p322', 'l179'), ('p1973', 'l179'), ('p1046', 'l179')],
                (3, 5, 9): [('p1554', 'l179'), ('p634', 'l179'), ('p54', 'l179')],
                (3, 6, 9): [('p1469', 'l179')],
                (3, 7, 9): [],
                (3, 8, 9): [('p770', 'l179'), ('p1053', 'l179'), ('p1581', 'l179'), ('p906', 'l179'), ('p1339', 'l179'), ('p1047', 'l179'), ('p126', 'l179')],
                (3, 9, 9): [('p1373', 'l179'), ('p537', 'l179'), ('p1197', 'l179'), ('p1006', 'l179'), ('p735', 'l179')],
                (3, 10, 9): [('p890', 'l179'), ('p1387', 'l179'), ('p1551', 'l179'), ('p494', 'l179'), ('p1004', 'l179'), ('p46', 'l179'), ('p1890', 'l179'), ('p1096', 'l179')],

                (3, 1, 10): [],
                (3, 2, 10): [('p313', 'l138')],
                (3, 3, 10): [('p175', 'l138'), ('p436', 'l138')],
                (3, 4, 10): [('p1553', 'l138'), ('p1119', 'l138')],
                (3, 5, 10): [('p90', 'l138'), ('p780', 'l138'), ('p35', 'l138')],
                (3, 6, 10): [],
                (3, 7, 10): [('p1333', 'l138'), ('p1692', 'l138'), ('p153', 'l138'), ('p270', 'l138')],
                (3, 8, 10): [('p174', 'l138'), ('p1304', 'l138'), ('p1172', 'l138')],
                (3, 9, 10): [],
                (3, 10, 10): []}

# key = lv, contents = delta TGL for each imax

delta_tgl_dict = {1: [[-0.254, 37.135, 60.442, 31.128, 20.37, 6.777, 49.363, 9.653, 99.359, 113.825],
                      [-0.163, 90.942, 131.344, 79.314, 47.152, 16.558, 68.731, 30.681, 159.944, 103.381],
                      [-0.143, 59.463, 87.17, 42.018, 23.425, 9.103, 49.58, 13.242, 110.851, 95.514],
                      [0.164, 81.927, 114.455, 57.571, 35.576, 11.834, 60.05, 21.072, 129.549, 89.362],
                      [0.072, 79.83, 115.096, 52.494, 29.642, 8.915, 59.119, 15.758, 121.922, 85.829],
                      [0.007, 124.151, 174.292, 82.415, 66.939, 12.898, 86.925, 27.401, 164.886, 99.639]],
                  2: [[0.255, 24.907, 11.951, 105.054, 35.912, 37.759, 200.705, 22.903, 76.041, 54.531],
                      [-0.243, 37.639, 30.189, 175.425, 54.647, 29.044, 188.089, 23.702, 121.035, 69.158],
                      [0.032, 34.4, 15.525, 139.959, 43.977, 34.287, 199.46, 18.964, 84.288, 53.921],
                      [-0.055, 44.289, 24.222, 170.035, 46.539, 31.188, 214.693, 20.5, 93.365, 55.87],
                      [-0.047, 43.416, 20.635, 162.07, 46.647, 32.428, 207.951, 18.471, 87.84, 49.4],
                      [0.408, 59.072, 28.196, 241.104, 59.087, 35.065, 244.489, 19.399, 103.208, 55.098]],
                  3: [[0.011, 13.228, 36.674, 65.64, 20.708, 8.384, 24.878, 124.864, 20.621, 51.806],
                      [-0.268, 31.746, 68.623, 97.493, 34.787, 11.975, 37.402, 172.472, 26.188, 50.933],
                      [0.153, 21.002, 50.016, 74.88, 24.49, 7.353, 21.514, 148.818, 19.648, 51.647],
                      [0.16, 28.508, 61.188, 86.757, 29.782, 9.199, 19.984, 166.231, 21.307, 52.456],
                      [-0.075, 27.415, 56.979, 79.806, 26.818, 8.531, 19.157, 161.008, 20.904, 50.605],
                      [-0.015, 45.08, 79.942, 97.402, 30.762, 11.808, 16.783, 178.176, 23.34, 60.535]],
                  4: [[0.219, 36.617, 0.217, 85.587, 21.901, 5.541, 59.164, 11.29, 204.365, 24.286],
                      [-0.682, 71.373, 0.156, 190.057, 47.499, 19.915, 156.714, 6.813, 357.481, 19.228],
                      [-0.057, 58.894, -0.039, 136.378, 27.79, 8.067, 77.143, 8.244, 258.377, 21.157],
                      [0.213, 75.145, -0.138, 185.335, 40.19, 12.649, 101.144, 6.608, 305.371, 20.752],
                      [-0.175, 83.143, 0.021, 177.238, 36.536, 9.365, 103.993, 5.923, 292.532, 19.638],
                      [0.845, 138.662, 0.19, 269.258, 65.953, 15.094, 206.58, 8.296, 393.381, 21.761]],
                  5: [[-0.078, 42.485, 82.672, 37.777, 71.401, 0.093, 116.491, 34.443, 0.001, 0.052],
                      [-0.175, 135.891, 180.579, 99.016, 129.101, -0.023, 129.044, 45.674, -0.107, -0.017],
                      [0.244, 78.468, 131.224, 59.333, 84.76, 0.149, 105.472, 36.239, 0.079, 0.058],
                      [0.285, 109.305, 175.043, 77.092, 115.703, -0.102, 109.21, 36.888, 0.003, 0.012],
                      [-0.147, 109.568, 171.835, 76.423, 105.307, -0.035, 105.792, 36.282, 0.111, -0.04],
                      [-0.204, 160.336, 251.369, 137.68, 158.047, 0.115, 116.637, 48.706, 0.002, 0.025]],
                  6: [[0.044, 31.215, -0.146, 109.446, 28.031, 91.995, 129.29, 229.236, 26.929, 48.148],
                      [0.117, 73.065, -0.14, 225.29, 54.032, 162.972, 89.274, 352.651, 38.398, 78.063],
                      [0.648, 62.686, 0.069, 154.868, 35.945, 103.607, 100.054, 265.641, 26.353, 54.755],
                      [-0.576, 89.177, -0.195, 203.353, 44.838, 138.704, 86.763, 322.162, 27.889, 51.445],
                      [-0.403, 91.975, -0.237, 196.574, 43.024, 123.251, 86.718, 303.092, 26.349, 50.93],
                      [0.292, 146.435, -0.197, 274.061, 65.51, 173.164, 38.739, 415.861, 30.784, 60.753]],
                  7: [[0.067, 33.843, -0.223, 33.655, 108.876, 71.5, 20.454, 0.13, 103.388, 11.025],
                      [0.05, 87.004, 0.143, 64.853, 203.5, 102.897, 19.114, 0.025, 110.175, 14.285],
                      [-0.101, 63.009, 0.241, 45.599, 147.901, 80.077, 12.57, 0.053, 93.696, 8.117],
                      [-0.27, 94.676, -0.357, 57.015, 171.992, 99.285, 9.535, -0.189, 100.359, 9.315],
                      [-0.425, 95.664, 0.113, 53.39, 174.615, 90.874, 12.176, -0.15, 91.8, 9.518],
                      [0.111, 144.729, 0.224, 85.769, 238.639, 125.942, 4.791, 0.194, 102.358, 10.871]],
                  8: [[-0.168, 0.176, 97.756, 131.825, -0.203, 0.03, 31.713, 46.1, 92.365, 17.775],
                      [0.126, 0.185, 161.816, 155.742, 0.016, -0.193, 46.022, 29.711, 57.427, 20.346],
                      [0.379, -0.208, 134.235, 171.445, -0.224, 0.083, 28.048, 27.443, 79.988, 17.899],
                      [-0.149, -0.242, 169.279, 204.827, -0.602, -0.349, 35.453, 27.404, 59.569, 18.556],
                      [0.527, -0.096, 171.71, 205.127, -0.025, -0.073, 33.186, 24.398, 62.96, 15.718],
                      [-0.281, 0.049, 248.993, 282.599, -0.416, -0.106, 70.736, 25.528, 61.077, 16.292]],
                  9: [[0.054, 27.212, 0.201, 110.777, 63.482, 7.939, 48.475, 192.399, 78.582, 171.737],
                      [-0.342, 87.08, 0.098, 166.01, 139.808, 14.394, -9.894, 317.716, 73.497, 222.236],
                      [-0.289, 48.656, 0.105, 147.507, 75.473, 9.511, 34.131, 234.426, 68.889, 176.061],
                      [-0.186, 74.427, -0.183, 186.902, 104.344, 12.355, 12.766, 280.234, 65.898, 197.153],
                      [-0.385, 76.88, -0.199, 181.172, 90.489, 9.644, 21.363, 265.049, 65.598, 176.763],
                      [-0.104, 125.377, 0.095, 250.968, 132.227, 18.139, 2.315, 342.107, 74.512, 209.681]],
                  10: [[0.057, 43.731, 59.557, 33.615, 56.801, 0.213, 58.46, 62.146, 0.096, -0.026],
                       [0.104, 111.741, 181.981, 87.915, 138.243, -0.779, 107.586, 48.302, -0.045, 0.05],
                       [0.006, 74.269, 111.07, 48.012, 72.082, 0.594, 65.383, 47.901, 0.058, 0.1],
                       [0.026, 103.051, 158.408, 66.763, 104.217, -0.041, 76.33, 43.608, -0.006, -0.155],
                       [-0.061, 107.173, 152.739, 65.449, 91.236, 0.33, 73.709, 41.517, -0.042, -0.11],
                       [-0.441, 163.792, 238.528, 121.457, 155.28, -0.112, 108.468, 44.68, -0.107, -0.066]]}

make_scatterplot(extra_interlink_dict, delta_tgl_dict, 3)